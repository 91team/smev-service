package com.nineone.smev.plugins

import com.nineone.smev.Client
import com.nineone.smev.models.*
import com.nineone.smev.schemas.ExchangePackage
import io.ktor.server.routing.*
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.response.*
import io.ktor.server.request.*
import jakarta.xml.bind.JAXBContext
import org.w3c.dom.Element
import org.xml.sax.InputSource
import ru.it.smev.message_exchange.autogenerated.types.v1_2.GetResponseResponse
import java.io.ByteArrayOutputStream
import java.io.IOException
import java.io.StringReader
import javax.xml.bind.JAXBException
import javax.xml.bind.Marshaller
import javax.xml.parsers.DocumentBuilderFactory

val client = initClient()

fun Application.configureRouting() {

    routing {
        post("/api/send") {
            val req = call.receive<ExchangeSendRequest>()
            client.sendRequest(buildMessage(req.payload), req.id)
            val resp = ExchangeResponse("ok", payload = "Request sent")
            call.respond(resp)
        }

        post("/api/receive") {
            val req = call.receive<ExchangeGetResponse>()
            val result = client.getResponse(req.id, req.senderId)
            val resp = ExchangeResponse("ok", payload = objectToString(result))
            call.respond(resp)
        }
    }
}

@Throws(JAXBException::class, IOException::class)
private fun objectToString(obj: Any): String {
    val baos = ByteArrayOutputStream()
    val jaxbMarshaller = javax.xml.bind.JAXBContext.newInstance(obj::class.java).createMarshaller()
    jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true)
    jaxbMarshaller.marshal(obj, baos)
    return baos.toString().also { baos.close() }
}

private fun buildMessage(data: String): Element {
    return DocumentBuilderFactory
        .newInstance().apply { isNamespaceAware = true }
        .newDocumentBuilder()
        .parse(InputSource(StringReader(data)))
        .documentElement
}

fun initClient(): Client {
    // Initialize SMEV service
    return Client(
        schemaUrl = System.getenv("SCHEMA_URL"),
        keyAlias =  System.getenv("KEY_ALIAS"),
        keyPassword = System.getenv("KEY_PASSWORD"),
        nodeId = System.getenv("NODE_ID"),
        soapServiceName = System.getenv("SOAP_SERVICE_NAME"),
        soapEndpointName = System.getenv("SOAP_ENDPOINT_NAME"),
        isTest = System.getenv("TEST_MESSAGE") == "true",
        prettyPrint = true
    )
}